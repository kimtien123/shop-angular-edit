{"ast":null,"code":"import { AngularFireDatabase } from '@angular/fire/compat/database';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { of } from 'rxjs';\nimport { take, switchMap, map } from 'rxjs/operators';\nimport { MessageService } from '../../messages/message.service';\nimport { User } from '../../models/user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/database\";\nimport * as i3 from \"../../messages/message.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(afAuth, db, messageService) {\n      this.afAuth = afAuth;\n      this.db = db;\n      this.messageService = messageService;\n      this.user = this.afAuth.authState.pipe(switchMap(auth => {\n        if (auth) {\n          return this.db.object('users/' + auth.uid).valueChanges().pipe(map(user => {\n            return {\n              email: auth.email,\n              firstName: auth.displayName,\n              lastName: auth.displayName,\n              roles: {\n                admin: auth.email === 'huynhthikimtien123@gmail.com'\n              },\n              uid: auth.uid\n            };\n          }));\n        } else {\n          return of(null);\n        }\n      }));\n    }\n\n    googleLogin() {// const provider = new firebase.GoogleAuthProvider();\n      // return this.afAuth.signInWithPopup(provider).then(\n      //   (credential) => {\n      //     this.updateNewUser(credential.user);\n      //   },\n      //   (error) => {\n      //     throw error;\n      //   }\n      // );\n    }\n\n    emailSignUp(email, password) {\n      return this.afAuth.createUserWithEmailAndPassword(email, password).then(user => {\n        this.updateNewUser(user);\n      }, error => {\n        throw error;\n      });\n    }\n\n    emailLogin(email, password) {\n      return this.afAuth.signInWithEmailAndPassword(email, password).then(user => {\n        this.updateNewUser(user);\n      }, error => {\n        throw error;\n      });\n    }\n\n    signOut() {\n      this.afAuth.signOut();\n      this.messageService.add('You have been logged out.');\n    }\n\n    updateProfile(userData) {\n      this.updateExistingUser(userData);\n      this.messageService.add('User profile has been updated!');\n    }\n\n    updatePassword(password) {\n      return this.afAuth.currentUser.then(currentUser => {\n        currentUser.updatePassword(password).then(() => {\n          this.messageService.add('Password has been updated!');\n        }).catch(function (error) {\n          throw error;\n        });\n      });\n    }\n\n    updateEmail(email) {\n      return this.afAuth.currentUser.then(currentUser => {\n        currentUser.updateEmail(email).then(() => {\n          this.updateExistingUser({\n            email: email\n          });\n          this.messageService.add('User email have been updated!');\n        }).catch(function (error) {\n          throw error;\n        });\n      });\n    }\n\n    updateNewUser(authData) {\n      const userData = new User(authData);\n      const ref = this.db.object('users/' + authData.uid);\n      ref.valueChanges().pipe(take(1)).subscribe(user => {\n        if (!user) {\n          ref.update(userData);\n        }\n      });\n    }\n\n    updateExistingUser(userData) {\n      this.afAuth.currentUser.then(currentUser => {\n        const ref = this.db.object('users/' + currentUser.uid);\n        ref.valueChanges().pipe(take(1)).subscribe(user => {\n          ref.update(userData);\n        });\n      });\n    }\n\n    getOrderFromDb() {}\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFireDatabase), i0.ɵɵinject(i3.MessageService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}